# 1 "lexer.mll"
 
  open Parser ;;
  exception Eoi ;;

  let pc c = Printf.eprintf "Lu '%c'\n%!" c;;
  let ps c = Printf.eprintf "Lu '%s'\n%!" c;;

  (* To buffer string literals *)
  let initial_string_buffer = Bytes.create 256;;
  let string_buff = ref initial_string_buffer;;
  let string_index = ref 0;;

  let reset_string_buffer () =
    string_buff := initial_string_buffer;
    string_index := 0;;

  let store_string_char c =
    if !string_index >= Bytes.length (!string_buff) then begin
      let new_buff = Bytes.create (Bytes.length (!string_buff) * 2) in
      Bytes.blit (!string_buff) 0 new_buff 0 (Bytes.length (!string_buff));
      string_buff := new_buff
    end;
    Bytes.unsafe_set (!string_buff) (!string_index) c;
    incr string_index;;

  let get_stored_string () =
    let s = Bytes.to_string (Bytes.sub (!string_buff) 0 (!string_index)) in
    string_buff := initial_string_buffer;
    s;;

  (* string for template *)
  let initial_template_string_buffer = Bytes.create 256;;
  let template_string_buff = ref initial_template_string_buffer;;
  let template_string_index = ref 0;;

  let reset_template_string_buffer () =
    template_string_buff := initial_template_string_buffer;
    template_string_index := 0;;

  let store_template_string_char c =
    if !template_string_index >= Bytes.length (!template_string_buff) then begin
      let new_buff = Bytes.create (Bytes.length (!template_string_buff) * 2) in
      Bytes.blit (!template_string_buff) 0 new_buff 0 (Bytes.length (!template_string_buff));
      template_string_buff := new_buff
    end;
    Bytes.unsafe_set (!template_string_buff) (!template_string_index) c;
    incr template_string_index;;

  let get_stored_template_string () =
    let s = Bytes.to_string (Bytes.sub (!template_string_buff) 0 (!template_string_index)) in
    template_string_buff := initial_template_string_buffer;
    let trimmed = String.trim s in
    if String.length trimmed = 0 then ""
    else trimmed;;

  (* To translate escape sequences *)
  let char_for_backslash c = match c with
  | 'n' -> '\010'
  | 'r' -> '\013'
  | 'b' -> '\008'
  | 't' -> '\009'
  | c   -> c

  let char_for_decimal_code lexbuf i =
    let c = 100 * (Char.code(Lexing.lexeme_char lexbuf i) - 48) +
             10 * (Char.code(Lexing.lexeme_char lexbuf (i+1)) - 48) +
                  (Char.code(Lexing.lexeme_char lexbuf (i+2)) - 48) in
    if (c < 0 || c > 255)
    then raise (Failure ("Illegal_escape: " ^ (Lexing.lexeme lexbuf)))
    else Char.chr c;;

  let char_for_hexadecimal_code lexbuf i =
    let d1 = Char.code (Lexing.lexeme_char lexbuf i) in
    let val1 = if d1 >= 97 then d1 - 87
               else if d1 >= 65 then d1 - 55
               else d1 - 48
    in
    let d2 = Char.code (Lexing.lexeme_char lexbuf (i+1)) in
    let val2 = if d2 >= 97 then d2 - 87
               else if d2 >= 65 then d2 - 55
               else d2 - 48
    in
    Char.chr (val1 * 16 + val2);;

  exception LexError of (Lexing.position * Lexing.position) ;;
  let line_number = ref 0 ;;

  let incr_line_number lexbuf =
    let pos = lexbuf.Lexing.lex_curr_p in
    lexbuf.Lexing.lex_curr_p <- { pos with
      Lexing.pos_lnum = pos.Lexing.pos_lnum + 1 ;
      Lexing.pos_bol = pos.Lexing.pos_cnum }
  ;;

# 97 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\222\255\223\255\226\255\227\255\228\255\229\255\230\255\
    \231\255\017\000\235\255\236\255\082\000\238\255\239\255\240\255\
    \002\000\003\000\046\000\083\000\079\000\158\000\192\000\032\000\
    \189\000\001\000\255\255\026\000\018\000\042\000\027\000\043\000\
    \036\000\034\000\039\000\077\000\059\000\075\000\184\000\001\000\
    \033\000\250\255\034\000\254\255\241\255\199\000\253\255\061\000\
    \078\000\108\000\106\000\111\000\123\000\107\000\123\000\251\255\
    \124\000\118\000\116\000\121\000\133\000\116\000\132\000\002\000\
    \004\000\248\255\014\001\090\001\166\001\242\001\062\002\138\002\
    \214\002\049\003\002\000\172\000\173\000\190\000\190\000\176\000\
    \006\000\204\000\245\255\242\255\224\255\225\255\233\255\080\003\
    \252\255\253\255\028\001\017\001\192\000\029\001\255\255\216\000\
    \217\000\162\003\248\255\249\255\007\000\250\255\149\003\255\255\
    \251\255\183\003\159\003\254\255\169\003\253\255\222\003\252\255\
    \110\002\253\255\254\255\255\255\082\002\253\255\254\255\208\000\
    \255\255\112\002\254\255\008\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\023\000\255\255\255\255\018\000\255\255\255\255\255\255\
    \011\000\009\000\033\000\008\000\033\000\006\000\008\000\033\000\
    \012\000\001\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \007\000\255\255\255\255\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \007\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\001\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\255\255\007\000\255\255\
    \255\255\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \255\255\255\255\255\255\000\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\088\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\098\000\000\000\000\000\255\255\000\000\104\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \114\000\000\000\000\000\000\000\118\000\000\000\000\000\255\255\
    \000\000\122\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\026\000\043\000\065\000\025\000\065\000\064\000\
    \065\000\101\000\124\000\064\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\023\000\003\000\000\000\000\000\020\000\042\000\076\000\
    \009\000\008\000\013\000\015\000\010\000\014\000\018\000\012\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\086\000\011\000\024\000\017\000\016\000\083\000\
    \082\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\005\000\081\000\004\000\063\000\041\000\
    \041\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\022\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\007\000\084\000\006\000\079\000\028\000\
    \029\000\085\000\066\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\080\000\030\000\031\000\
    \032\000\033\000\034\000\035\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\036\000\037\000\
    \038\000\056\000\019\000\049\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \039\000\050\000\051\000\052\000\053\000\040\000\046\000\054\000\
    \055\000\057\000\045\000\058\000\059\000\060\000\061\000\047\000\
    \062\000\055\000\041\000\041\000\078\000\066\000\080\000\066\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\044\000\066\000\093\000\094\000\094\000\120\000\
    \002\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\092\000\000\000\000\000\000\000\019\000\
    \000\000\019\000\019\000\019\000\019\000\067\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\048\000\077\000\094\000\094\000\000\000\
    \000\000\094\000\094\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\096\000\095\000\093\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\066\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\000\000\000\000\000\000\
    \000\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\068\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\066\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\019\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\069\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\066\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\000\000\000\000\000\000\
    \000\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\070\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\066\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \115\000\000\000\124\000\000\000\119\000\123\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\019\000\000\000\071\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\066\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\000\000\000\000\000\000\
    \000\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\072\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\066\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\000\000\000\000\000\000\000\000\019\000\000\000\019\000\
    \019\000\019\000\019\000\073\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\074\000\117\000\000\000\000\000\000\000\075\000\000\000\
    \000\000\000\000\092\000\000\000\000\000\091\000\000\000\000\000\
    \066\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\113\000\000\000\
    \255\255\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\090\000\000\000\000\000\000\000\
    \019\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\101\000\000\000\000\000\100\000\
    \000\000\000\000\000\000\000\000\000\000\107\000\000\000\107\000\
    \000\000\000\000\000\000\000\000\107\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\103\000\106\000\106\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\000\000\000\000\000\000\000\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\110\000\
    \110\000\107\000\000\000\000\000\000\000\000\000\000\000\107\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\102\000\000\000\
    \000\000\000\000\000\000\107\000\000\000\000\000\000\000\107\000\
    \000\000\107\000\000\000\000\000\000\000\105\000\111\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\111\000\111\000\111\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\000\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\000\
    \111\000\111\000\111\000\111\000\111\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\099\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\025\000\063\000\000\000\064\000\063\000\
    \080\000\100\000\123\000\080\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\039\000\074\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\009\000\000\000\000\000\000\000\000\000\016\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\023\000\040\000\
    \042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\012\000\000\000\020\000\027\000\
    \028\000\012\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\020\000\029\000\030\000\
    \031\000\032\000\033\000\034\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\035\000\036\000\
    \037\000\047\000\019\000\048\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \038\000\049\000\050\000\051\000\052\000\038\000\024\000\053\000\
    \054\000\056\000\024\000\057\000\058\000\059\000\060\000\045\000\
    \061\000\062\000\075\000\076\000\077\000\078\000\079\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\024\000\081\000\092\000\095\000\096\000\119\000\
    \000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\091\000\255\255\255\255\255\255\022\000\
    \255\255\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\045\000\066\000\090\000\093\000\255\255\
    \255\255\090\000\093\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\090\000\093\000\091\000\255\255\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\255\255\255\255\255\255\255\255\255\255\255\255\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\255\255\255\255\255\255\
    \255\255\067\000\255\255\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\255\255\255\255\255\255\255\255\068\000\255\255\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\255\255\255\255\255\255\
    \255\255\069\000\255\255\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \112\000\255\255\121\000\255\255\116\000\121\000\255\255\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\255\255\255\255\255\255\255\255\070\000\255\255\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\255\255\255\255\255\255\
    \255\255\071\000\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\255\255\255\255\255\255\255\255\072\000\255\255\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\073\000\116\000\255\255\255\255\255\255\073\000\255\255\
    \255\255\255\255\087\000\255\255\255\255\087\000\255\255\255\255\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\255\255\255\255\255\255\112\000\255\255\
    \121\000\255\255\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\087\000\255\255\255\255\255\255\
    \073\000\255\255\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\097\000\255\255\255\255\097\000\
    \255\255\255\255\255\255\255\255\255\255\102\000\255\255\102\000\
    \255\255\255\255\255\255\255\255\102\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\097\000\102\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\102\000\102\000\102\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\255\255\255\255\255\255\255\255\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\102\000\255\255\255\255\255\255\255\255\255\255\102\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\097\000\255\255\
    \255\255\255\255\255\255\102\000\255\255\255\255\255\255\102\000\
    \255\255\102\000\255\255\255\255\255\255\102\000\110\000\110\000\
    \110\000\110\000\110\000\110\000\110\000\110\000\110\000\110\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\255\255\110\000\
    \110\000\110\000\110\000\110\000\110\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\110\000\
    \110\000\110\000\110\000\110\000\110\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \087\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\102\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\097\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec lex lexbuf =
   __ocaml_lex_lex_rec lexbuf 0
and __ocaml_lex_lex_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 101 "lexer.mll"
                    ( lex lexbuf )
# 485 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
    ( incr_line_number lexbuf ;
      lex lexbuf )
# 491 "lexer.ml"

  | 2 ->
# 106 "lexer.mll"
      ( VAR_START )
# 496 "lexer.ml"

  | 3 ->
# 108 "lexer.mll"
      ( VAR_END )
# 501 "lexer.ml"

  | 4 ->
# 110 "lexer.mll"
      ( TEMPLATE_START )
# 506 "lexer.ml"

  | 5 ->
# 112 "lexer.mll"
      ( TEMPLATE_END )
# 511 "lexer.ml"

  | 6 ->
let
# 113 "lexer.mll"
                  lxm
# 517 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 114 "lexer.mll"
      ( INT(int_of_string lxm) )
# 521 "lexer.ml"

  | 7 ->
# 115 "lexer.mll"
                                      ( 
      reset_template_string_buffer();
      in_template_string lexbuf;
      let content = get_stored_template_string() in
      TEMPLATE_STRING content )
# 530 "lexer.ml"

  | 8 ->
let
# 120 "lexer.mll"
                                                                                                                                lxm
# 536 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 121 "lexer.mll"
      ( match lxm with
        | "let" -> LET
        | "mut" -> MUT
        | "if" -> IF
        | "elsif" -> ELSIF
        | "else" -> ELSE
        | "endif" -> ENDIF
        | "while" -> WHILE
        | "endwhile" -> ENDWHILE
        | "loop" -> LOOP
        | "endloop" -> ENDLOOP
        | "for" -> FOR
        | "endfor" -> ENDFOR
        | "in" -> IN
        | "return" -> RETURN
        | "print" -> PRINT
        | "true" -> TRUE
        | "false" -> FALSE
        | "break" -> BREAK
        | "fn" -> FN
        | "use" -> USE
        | _ when not (String.contains lxm '/' || String.contains lxm '.') -> IDENT(lxm) 
        | _ -> IMPORT_PATH(lxm)
        )
# 563 "lexer.ml"

  | 9 ->
# 145 "lexer.mll"
          ( COLONEQUAL )
# 568 "lexer.ml"

  | 10 ->
# 146 "lexer.mll"
           ( EQUALEQUAL )
# 573 "lexer.ml"

  | 11 ->
# 147 "lexer.mll"
          ( GREATER)
# 578 "lexer.ml"

  | 12 ->
# 147 "lexer.mll"
                            ( SMALLER )
# 583 "lexer.ml"

  | 13 ->
# 148 "lexer.mll"
          ( GREATEREQUAL)
# 588 "lexer.ml"

  | 14 ->
# 148 "lexer.mll"
                                  ( SMALLEREQUAL )
# 593 "lexer.ml"

  | 15 ->
# 149 "lexer.mll"
          ( PLUS )
# 598 "lexer.ml"

  | 16 ->
# 149 "lexer.mll"
                           ( MINUS )
# 603 "lexer.ml"

  | 17 ->
# 149 "lexer.mll"
                                           ( MULT )
# 608 "lexer.ml"

  | 18 ->
# 149 "lexer.mll"
                                                          ( DIV )
# 613 "lexer.ml"

  | 19 ->
# 150 "lexer.mll"
          ( SEMICOLON )
# 618 "lexer.ml"

  | 20 ->
# 151 "lexer.mll"
          ( COMMA )
# 623 "lexer.ml"

  | 21 ->
# 152 "lexer.mll"
          ( DOUBLEDOT )
# 628 "lexer.ml"

  | 22 ->
# 153 "lexer.mll"
           ( UNIT )
# 633 "lexer.ml"

  | 23 ->
# 154 "lexer.mll"
          ( LPAREN )
# 638 "lexer.ml"

  | 24 ->
# 155 "lexer.mll"
          ( RPAREN )
# 643 "lexer.ml"

  | 25 ->
# 156 "lexer.mll"
          ( LSIMPLEBRACE )
# 648 "lexer.ml"

  | 26 ->
# 157 "lexer.mll"
          ( RSIMPLEBRACE )
# 653 "lexer.ml"

  | 27 ->
# 158 "lexer.mll"
          ( LBRACKET )
# 658 "lexer.ml"

  | 28 ->
# 159 "lexer.mll"
          ( RBRACKET )
# 663 "lexer.ml"

  | 29 ->
# 160 "lexer.mll"
          ( reset_string_buffer();
            in_string lexbuf;
            let s = get_stored_string() in
            STRING s )
# 671 "lexer.ml"

  | 30 ->
# 164 "lexer.mll"
          ( in_cpp_comment lexbuf )
# 676 "lexer.ml"

  | 31 ->
# 165 "lexer.mll"
          ( in_c_comment lexbuf )
# 681 "lexer.ml"

  | 32 ->
# 166 "lexer.mll"
          ( EOF )
# 686 "lexer.ml"

  | 33 ->
let
# 167 "lexer.mll"
         c
# 692 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 167 "lexer.mll"
           ( raise (LexError (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf)) )
# 696 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_lex_rec lexbuf __ocaml_lex_state

and in_template_string lexbuf =
   __ocaml_lex_in_template_string_rec lexbuf 87
and __ocaml_lex_in_template_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 171 "lexer.mll"
      ( () )
# 708 "lexer.ml"

  | 1 ->
let
# 172 "lexer.mll"
               s
# 714 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 173 "lexer.mll"
      ( for i = 0 to String.length s - 1 do
          store_template_string_char s.[i];
        done;
        in_template_string lexbuf
      )
# 722 "lexer.ml"

  | 2 ->
# 179 "lexer.mll"
      ( raise Eoi )
# 727 "lexer.ml"

  | 3 ->
let
# 180 "lexer.mll"
         c
# 733 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 181 "lexer.mll"
      ( store_template_string_char c; in_template_string lexbuf )
# 737 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_in_template_string_rec lexbuf __ocaml_lex_state

and in_string lexbuf =
   __ocaml_lex_in_string_rec lexbuf 97
and __ocaml_lex_in_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 185 "lexer.mll"
      ( () )
# 749 "lexer.ml"

  | 1 ->
# 187 "lexer.mll"
      ( store_string_char(char_for_backslash(Lexing.lexeme_char lexbuf 1));
        in_string lexbuf )
# 755 "lexer.ml"

  | 2 ->
# 190 "lexer.mll"
      ( store_string_char(char_for_decimal_code lexbuf 1);
        in_string lexbuf )
# 761 "lexer.ml"

  | 3 ->
# 193 "lexer.mll"
      ( store_string_char(char_for_hexadecimal_code lexbuf 2);
         in_string lexbuf )
# 767 "lexer.ml"

  | 4 ->
let
# 195 "lexer.mll"
              chars
# 773 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 196 "lexer.mll"
      ( skip_to_eol lexbuf; raise (Failure("Illegal escape: " ^ chars)) )
# 777 "lexer.ml"

  | 5 ->
let
# 197 "lexer.mll"
               s
# 783 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 198 "lexer.mll"
      ( for i = 0 to String.length s - 1 do
          store_string_char s.[i];
        done;
        in_string lexbuf
      )
# 791 "lexer.ml"

  | 6 ->
# 204 "lexer.mll"
      ( raise Eoi )
# 796 "lexer.ml"

  | 7 ->
let
# 205 "lexer.mll"
         c
# 802 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 206 "lexer.mll"
      ( store_string_char c; in_string lexbuf )
# 806 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_in_string_rec lexbuf __ocaml_lex_state

and in_cpp_comment lexbuf =
   __ocaml_lex_in_cpp_comment_rec lexbuf 112
and __ocaml_lex_in_cpp_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 209 "lexer.mll"
         ( lex lexbuf )
# 818 "lexer.ml"

  | 1 ->
# 210 "lexer.mll"
         ( in_cpp_comment lexbuf )
# 823 "lexer.ml"

  | 2 ->
# 211 "lexer.mll"
         ( raise Eoi )
# 828 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_in_cpp_comment_rec lexbuf __ocaml_lex_state

and in_c_comment lexbuf =
   __ocaml_lex_in_c_comment_rec lexbuf 116
and __ocaml_lex_in_c_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 214 "lexer.mll"
         ( lex lexbuf )
# 840 "lexer.ml"

  | 1 ->
# 215 "lexer.mll"
         ( in_c_comment lexbuf )
# 845 "lexer.ml"

  | 2 ->
# 216 "lexer.mll"
         ( raise Eoi )
# 850 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_in_c_comment_rec lexbuf __ocaml_lex_state

and skip_to_eol lexbuf =
   __ocaml_lex_skip_to_eol_rec lexbuf 121
and __ocaml_lex_skip_to_eol_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 219 "lexer.mll"
            ( () )
# 862 "lexer.ml"

  | 1 ->
# 220 "lexer.mll"
            ( skip_to_eol lexbuf )
# 867 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_skip_to_eol_rec lexbuf __ocaml_lex_state

;;

